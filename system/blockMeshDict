/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  10
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

convertToMeters 1;

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points(32);
        points[0] = point(0.5, 0, -0.5);
        points[1] = point(1.5, 0, -0.5);
        points[2] = point(20, 0, -0.5);
        points[3] = point(20, 1.06066017177982, -0.5);
        points[4] = point(1.06066017177982, 1.06066017177982, -0.5);
        points[5] = point(0.353553390593274, 0.353553390593274, -0.5);
        points[6] = point(20, 5, -0.5);
        points[7] = point(1.06066017177982, 5, -0.5);
        points[8] = point(0, 5, -0.5);
        points[9] = point(0, 1.5, -0.5);
        points[10] = point(0, 0.5, -0.5);
        points[11] = point(-0.5, 0, -0.5);
        points[12] = point(-1.5, 0, -0.5);
        points[13] = point(-5, 0, -0.5);
        points[14] = point(-5, 1.06066017177982, -0.5);
        points[15] = point(-1.06066017177982, 1.06066017177982, -0.5);
        points[16] = point(-0.353553390593274, 0.353553390593274, -0.5);
        points[17] = point(-5, 5, -0.5);
        points[18] = point(-1.06066017177982, 5, -0.5);
        points[19] = point(20, -1.06066017177982, -0.5);
        points[20] = point(1.06066017177982, -1.06066017177982, -0.5);
        points[21] = point(0.353553390593274, -0.353553390593274, -0.5);
        points[22] = point(20, -5, -0.5);
        points[23] = point(1.06066017177982, -5, -0.5);
        points[24] = point(0, -5, -0.5);
        points[25] = point(0, -1.5, -0.5);
        points[26] = point(0, -0.5, -0.5);
        points[27] = point(-5, -1.06066017177982, -0.5);
        points[28] = point(-1.06066017177982, -1.06066017177982, -0.5);
        points[29] = point(-0.353553390593274, -0.353553390593274, -0.5);
        points[30] = point(-5, -5, -0.5);
        points[31] = point(-1.06066017177982, -5, -0.5);
        // Duplicate z points
        label sz = points.size();
        points.setSize(2*sz);
        for (label i = 0; i < sz; i++)
        {
            const point& pt = points[i];
            points[i+sz] = point(pt.x(), pt.y(), -pt.z());
        }

        os  << points;
    #};
};


blocks
(
hex (5 4 9 10 37 36 41 42) (50 20 1) simpleGrading (12.5 1 1)
hex (0 1 4 5 32 33 36 37) (50 20 1) simpleGrading (12.5 1 1)
hex (1 2 3 4 33 34 35 36) (150 20 1) simpleGrading (5 1 1)
hex (4 3 6 7 36 35 38 39) (150 30 1) simpleGrading (5 4 1)
hex (9 4 7 8 41 36 39 40) (20 30 1) simpleGrading (1 4 1)
hex (15 16 10 9 47 48 42 41) (50 20 1) simpleGrading (0.08 1 1)
hex (12 11 16 15 44 43 48 47) (50 20 1) simpleGrading (0.08 1 1)
hex (13 12 15 14 45 44 47 46) (30 20 1) simpleGrading (0.25 1 1)
hex (14 15 18 17 46 47 50 49) (30 30 1) simpleGrading (0.25 4 1)
hex (15 9 8 18 47 41 40 50) (20 30 1) simpleGrading (1 4 1)
hex (25 20 21 26 57 52 53 58) (20 50 1) simpleGrading (1 0.08 1)
hex (21 20 1 0 53 52 33 32) (50 20 1) simpleGrading (12.5 1 1)
hex (20 19 2 1 52 51 34 33) (150 20 1) simpleGrading (5 1 1)
hex (23 22 19 20 55 54 51 52) (150 30 1) simpleGrading (5 0.25 1)
hex (24 23 20 25 56 55 52 57) (20 30 1) simpleGrading (1 0.25 1)
hex (28 25 26 29 60 57 58 61) (20 50 1) simpleGrading (1 0.08 1)
hex (28 29 11 12 60 61 43 44) (50 20 1) simpleGrading (0.08 1 1)
hex (27 28 12 13 59 60 44 45) (30 20 1) simpleGrading (0.25 1 1)
hex (30 31 28 27 62 63 60 59) (30 30 1) simpleGrading (0.25 0.25 1)
hex (31 24 25 28 63 56 57 60) (20 30 1) simpleGrading (1 0.25 1)
);

edges
(
    arc 0 5 45.0 (0 0 1)
    arc 5 10 45.0 (0 0 1)
    arc 1 4 45.0 (0 0 1)
    arc 4 9 45.0 (0 0 1)
    arc 32 37 45.0 (0 0 1)
    arc 37 42 45.0 (0 0 1)
    arc 33 36 45.0 (0 0 1)
    arc 36 41 45.0 (0 0 1)
    arc 26 21 45.0 (0 0 1)
    arc 21 0 45.0 (0 0 1)
    arc 25 20 45.0 (0 0 1)
    arc 20 1 45.0 (0 0 1)
    arc 58 53 45.0 (0 0 1)
    arc 53 32 45.0 (0 0 1)
    arc 57 52 45.0 (0 0 1)
    arc 52 33 45.0 (0 0 1)
    arc 11 16 45.0 (0 0 -1)
    arc 16 10 45.0 (0 0 -1)
    arc 12 15 45.0 (0 0 -1)
    arc 15 9 45.0 (0 0 -1)
    arc 43 48 45.0 (0 0 -1)
    arc 48 42 45.0 (0 0 -1)
    arc 44 47 45.0 (0 0 -1)
    arc 47 41 45.0 (0 0 -1)
    arc 26 29 45.0 (0 0 -1)
    arc 29 11 45.0 (0 0 -1)
    arc 25 28 45.0 (0 0 -1)
    arc 28 12 45.0 (0 0 -1)
    arc 58 61 45.0 (0 0 -1)
    arc 61 43 45.0 (0 0 -1)
    arc 57 60 45.0 (0 0 -1)
    arc 60 44 45.0 (0 0 -1)
);

boundary
(
    farfield
    {
        type patch;
        faces
        (
            // BOT
            (30 31 62 63)
            (31 24 63 56)
            (24 23 56 55)
            (23 22 55 54)
            // TOP
            (17 18 49 50)
            (18 8 50 40)
            (8 7 40 39)
            (7 6 39 38)
        );
    }
    outlet
    {
        type patch;
        faces
        (
            (22 19 54 51)
            (19 2 51 34)
            (2 3 34 35)
            (3 6 35 38)
        );
    }
    inlet
    {
        type patch;
        faces
        (
            (30 27 62 59)
            (27 13 59 45)
            (13 14 45 46)
            (14 17 46 49)
        );
    }
    cylinderWall
    {
        type wall;
        faces
        (
            (11 29 43 61)
            (29 26 61 58)
            (26 21 58 53)
            (21 0 53 32)
            (11 16 43 48)
            (16 10 48 42)
            (10 5 42 37)
            (5 0 37 32)
        );
    }
    backAndFront
    {
        type empty;
        faces
        (
            (5 4 9 10)
            (0 1 4 5)
            (1 2 3 4)
            (4 3 6 7)
            (9 4 7 8)
            (15 16 10 9)
            (12 11 16 15)
            (13 12 15 14)
            (14 15 18 17)
            (15 9 8 18)
            (25 20 21 26)
            (21 20 1 0)
            (20 19 2 1)
            (23 22 19 20)
            (24 23 20 25)
            (28 25 26 29)
            (28 29 11 12)
            (27 28 12 13)
            (30 31 28 27)
            (31 24 25 28)
            (37 36 41 42)
            (32 33 36 37)
            (33 34 35 36)
            (36 35 38 39)
            (41 36 39 40)
            (47 48 42 41)
            (44 43 48 47)
            (45 44 47 46)
            (46 47 50 49)
            (47 41 40 50)
            (57 52 53 58)
            (53 52 33 32)
            (52 51 34 33)
            (55 54 51 52)
            (56 55 52 57)
            (60 57 58 61)
            (60 61 43 44)
            (59 60 44 45)
            (62 63 60 59)
            (63 56 57 60)
        );
    }
);


// ************************************************************************* //
